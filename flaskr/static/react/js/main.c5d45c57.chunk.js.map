{"version":3,"sources":["App.js","TopGraph.js","serviceWorker.js","ZingChart.js","ElementGraph.js","BodyGraph.js","example.js","index.js","Victory.js"],"names":["GraphDetails","items","this","props","dataaxises","map","dataaxis","i","push","type","dataKey","width","height","data","dataarray","margin","top","right","left","bottom","onClick","strokeDasharray","React","Component","Graph","state","token","namearray","Array","fill","className","name","handleClick","TopGraph","graphdata","graph","graphaxis","copydataarray","maximumdatapoints","length","thedata","j","parseInt","description","author","catagory","class","id","data-w-id","href","Boolean","window","location","hostname","match","ElementGraph","BodyGraph","hasMore","dataarrays","graphaxises","names","authors","catagories","descriptions","numloaded","x","z","offset","axios","get","then","res","setState","loader","pageStart","loadMore","loadItems","bind","topgraph","bodygraph","console","log","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"js/main.c5d45c57.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport {LineChart, Line, XAxis, YAxis,Tooltip,Legend,CartesianGrid} from 'recharts'\r\n\r\nclass GraphDetails extends React.Component {\r\n\r\n    render () {\r\n        var items = [];\r\n        this.props.dataaxises.map((dataaxis, i) => {\r\n            items.push(\r\n                <Line type=\"monotone\" dataKey={dataaxis['name']} />\r\n            );\r\n        });\r\n\r\n        return (\r\n        <LineChart\r\n        width={this.props.width}\r\n        height={this.props.height}\r\n        data={this.props.dataarray}\r\n        margin={{\r\n          top: 5, right: 30, left: 20, bottom: 5,\r\n        }}\r\n        onClick={this.props.onClick}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"name\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Legend />\r\n        {items}\r\n        </LineChart>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass Graph extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            token: 1,\r\n            dataarray: this.props.data,\r\n            dataaxises: this.props.dataaxises,\r\n            namearray: Array(9).fill('name2'),\r\n        };\r\n\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"graph-x\">\r\n                <div className=\"graph-graphDetails\">\r\n                    <GraphDetails dataarray={this.state.dataarray} dataaxises={this.state.dataaxises} name={this.state.namearray[0]} onClick={() => this.handleClick(0)} height={this.props.height} width={this.props.width}/>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Graph;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {LineChart, Line, XAxis, YAxis,Tooltip,Legend,CartesianGrid} from 'recharts'\r\nimport Graph from './App';\r\n\r\nclass TopGraph extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        var graphdata = this.props.graph['graphdata'];\r\n        var graphaxis = this.props.graph['graphaxis'];\r\n        var copydataarray = [];\r\n        var maximumdatapoints = 0;\r\n        graphdata.map((graph, i) => {\r\n            if (maximumdatapoints < graph.length) {\r\n                maximumdatapoints = graph.length\r\n            }\r\n        });\r\n\r\n        for (var i=0;i<maximumdatapoints;i++) {\r\n            var thedata = {name: i};\r\n            for (var j=0;j<graphaxis.length;j++) {\r\n                if (i < graphdata[j].length ) {\r\n                    thedata[graphaxis[j]['name']] = parseInt(graphdata[j][i]);\r\n                }\r\n            }\r\n            copydataarray.push(thedata);\r\n        }\r\n\r\n        this.state = {\r\n            token: 1,\r\n            name: this.props.graph['graph']['name'],\r\n            dataarray: copydataarray,\r\n            dataaxises: graphaxis,\r\n            description: this.props.graph['graph']['description'],\r\n            author: this.props.graph['graph']['authorname'],\r\n            catagory: this.props.graph['graph']['catagory'],\r\n        };\r\n\r\n    }\r\n\r\n    render () {\r\n        return (\r\n    <div class=\"container\">\r\n      <div class=\"posts-wrapper cc-top-post\">\r\n        <div class=\"w-dyn-list\">\r\n          <div class=\"w-dyn-items\">\r\n            <div class=\"top-post-item w-dyn-item\" id=\"top_post\">\r\n              <a data-w-id=\"f584d68a-6baf-e0a3-5c39-421b1f2647d2\" href=\"#\" class=\"top-post-image w-inline-block\">\r\n                <Graph data={this.state.dataarray} dataaxises={this.state.dataaxises} width={600} height={360}/>\r\n              </a>\r\n              <div class=\"top-post-text\">\r\n\t            <a href=\"#\" class=\"category-link\">{this.state.catagory}</a>\r\n\t            <div class=\"top-post-text\">\r\n\t\t          <a href=\"#\" class=\"category-link\">\r\n\t\t          </a>\r\n\t\t          <a href=\"#\" class=\"top-post-link-block w-inline-block\">\r\n\t\t\t        <h2 class=\"h2\">{this.state.name}</h2>\r\n\t\t          </a>\r\n\t\t          <div class=\"post-short-text\">{this.state.description}</div>\r\n\t\t          <div class=\"text-block-2\">\r\n\t\t          </div>\r\n                  <div class=\"post-author-text\">\r\n\t\t            <div class=\"post-author cc-top-margin\">By</div>\r\n                    <a href=\"#\" class=\"post-author\">{this.state.author}</a>\r\n                </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default TopGraph;\r\n//                    <GraphDetails data={this.state.dataarray[0]} name={this.state.namearray[0]} onClick={() => this.handleClick(0)} height={this.props.height} width={this.props.width}/>\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport './App.css';\r\nimport ZingChart from 'zingchart-react';\r\nimport 'zingchart-react/dist/modules/zingchart-depth.min.js';\r\n\r\nclass ChartZ extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        if (props.type == 'bar') {\r\n            this.state = {\r\n            config: {\r\n                type: 'bar',\r\n                series: [{\r\n                values: [4,5,3,4,5,3,5,4,11]\r\n                    }]\r\n                }\r\n            };\r\n        }\r\n        if (props.type == 'line') {\r\n            this.state = {\r\n                config: {\r\n                        type: \"line\",\r\n                        series: [\r\n                        { values: [20,40,25,50,15,45,33,34]},\r\n                        { values: [5,30,21,18,59,50,28,33]},\r\n                        { values: [30,5,18,21,33,41,29,15]}\r\n                    ]\r\n                }\r\n            };\r\n        }\r\n  }\r\n  render() {\r\n    return (\r\n        <ZingChart data={this.state.config} width={400} height={240}/>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChartZ;\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {LineChart, Line, XAxis, YAxis,Tooltip,Legend,CartesianGrid} from 'recharts'\r\nimport Graph from './App';\r\nimport ChartZ from './ZingChart'\r\n\r\nclass ElementGraph extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div class=\"_3-collection-item w-dyn-item w-col w-col-3\">\r\n                <a href=\"#\" class=\"posts-image w-inline-block\">\r\n                    <Graph data={this.props.dataarray} dataaxises={this.props.dataaxises} width={this.props.width} height={this.props.height}/>\r\n                </a>\r\n                <div class=\"post-info-text\">\r\n                    <a href=\"#\" class=\"category-link\">{this.props.catagory}</a>\r\n                    <br></br>\r\n                    <a href=\"#\" class=\"post-title w-inline-block\">\r\n                        <h3 class=\"h3\">{this.props.name}</h3>\r\n                    </a>\r\n                    <div>{this.props.description}</div>\r\n                    <div class=\"post-author-text cc-small-thumbnail\">\r\n                        <div class=\"post-author cc-top-margin\">By</div>\r\n                        <a href=\"#\" class=\"post-author\">{this.props.author}</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default ElementGraph;","import React from 'react';\r\nimport './App.css';\r\nimport {LineChart, Line, XAxis, YAxis,Tooltip,Legend,CartesianGrid} from 'recharts';\r\nimport Graph from './App';\r\nimport ChartZ from './ZingChart';\r\nimport ElementGraph from './ElementGraph';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport axios from 'axios';\r\n\r\nclass BodyGraph extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        var dataarrays = [];\r\n        var graphaxises = [];\r\n        var names = [];\r\n        var authors = [];\r\n        var catagories = [];\r\n        var descriptions = [];\r\n        var numloaded = this.props.graph.length;\r\n        for (var x =0;x<this.props.graph.length;x++) {\r\n            var graphdata = this.props.graph[x]['graphdata'];\r\n            var graphaxis = this.props.graph[x]['graphaxis'];\r\n            var name = this.props.graph[x]['graph']['name'];\r\n            var author = this.props.graph[x]['graph']['authorname'];\r\n            var description = this.props.graph[x]['graph']['description'];\r\n            var catagory = this.props.graph[x]['graph']['catagory'];\r\n            var copydataarray = [];\r\n            var maximumdatapoints = 0;\r\n            graphdata.map((graph, z) => {\r\n                if (maximumdatapoints < graph.length) {\r\n                    maximumdatapoints = graph.length;\r\n                }\r\n            });\r\n\r\n            for (var i=0;i<maximumdatapoints;i++) {\r\n                var thedata = {name: i};\r\n                for (var j=0;j<graphaxis.length;j++) {\r\n                    if (i < graphdata[j].length ) {\r\n                        thedata[graphaxis[j]['name']] = parseInt(graphdata[j][i]);\r\n                    }\r\n                }\r\n                copydataarray.push(thedata);\r\n            }\r\n            dataarrays.push(copydataarray);\r\n            graphaxises.push(graphaxis);\r\n            names.push(name);\r\n            authors.push(author);\r\n            descriptions.push(description);\r\n            catagories.push(catagory);\r\n        }\r\n        var hasMore;\r\n        if (numloaded >= 3) {\r\n            hasMore = true;\r\n        }\r\n        else {\r\n            hasMore = false;\r\n        }\r\n        var numloaded = dataarrays.length;\r\n        this.state = {\r\n            token: 1,\r\n            dataarrays: dataarrays,\r\n            dataaxises: graphaxises,\r\n            names: names,\r\n            authors: authors,\r\n            descriptions: descriptions,\r\n            catagories: catagories,\r\n            offset: numloaded,\r\n            hasMore: hasMore,\r\n        };\r\n\r\n    }\r\n\r\n    loadItems() {\r\n        var offset = this.state.offset;\r\n        axios.get('/getgraph?offset=' + offset + '&num=3').then(res => {\r\n            res = res.data['graphdata'];\r\n            if (res.length == 0) {\r\n                this.setState({\r\n                    hasMore: false,\r\n                });\r\n                return;\r\n            }\r\n            var dataarrays = this.state.dataarrays;\r\n            var graphaxises = this.state.dataaxises;\r\n            var authors = this.state.authors;\r\n            var descriptions = this.state.descriptions;\r\n            var catagories = this.state.catagories;\r\n            var names = this.state.names;\r\n            for (var x =0;x<res.length;x++) {\r\n                var graphdata = res[x]['graphdata'];\r\n                var graphaxis = res[x]['graphaxis'];\r\n                var name = res[x]['graph']['name'];\r\n                var author = res[x]['graph']['authorname'];\r\n                var description = res[x]['graph']['description'];\r\n                var catagory = res[x]['graph']['catagory'];\r\n                var copydataarray = [];\r\n                var maximumdatapoints = 0;\r\n                graphdata.map((graph, z) => {\r\n                    if (maximumdatapoints < graph.length) {\r\n                        maximumdatapoints = graph.length;\r\n                    }\r\n                });\r\n\r\n                for (var i=0;i<maximumdatapoints;i++) {\r\n                    var thedata = {name: i};\r\n                    for (var j=0;j<graphaxis.length;j++) {\r\n                        if (i < graphdata[j].length ) {\r\n                            thedata[graphaxis[j]['name']] = parseInt(graphdata[j][i]);\r\n                        }\r\n                    }\r\n                    copydataarray.push(thedata);\r\n                }\r\n                dataarrays.push(copydataarray);\r\n                graphaxises.push(graphaxis);\r\n                names.push(name);\r\n                authors.push(author);\r\n                descriptions.push(description);\r\n                catagories.push(catagory);\r\n            }\r\n            this.setState({\r\n                dataarrays: dataarrays,\r\n                dataaxises: graphaxises,\r\n                names: names,\r\n                authors: authors,\r\n                descriptions: descriptions,\r\n                catagories: catagories,\r\n                offset: res.length + this.state.offset,\r\n            });\r\n        });\r\n    }\r\n\r\n    render () {\r\n        const loader = <div className=\"loader\">Loading ...</div>;\r\n\r\n        var items = [];\r\n\r\n        this.state.dataarrays.map((graph, i) => {\r\n            items.push(\r\n                <ElementGraph\r\n                    name={this.state.names[i]}\r\n                    dataarray={graph}\r\n                    dataaxises={this.state.dataaxises[i]}\r\n                    catagory={this.state.catagories[i]}\r\n                    author={this.state.authors[i]}\r\n                    description={this.state.descriptions[i]}\r\n                    width={400}\r\n                    height={240}/>\r\n            );\r\n        });\r\n        return (\r\n            <InfiniteScroll\r\n                pageStart={0}\r\n                loadMore={this.loadItems.bind(this)}\r\n                hasMore={this.state.hasMore}\r\n                loader={loader}>\r\n                    {items}\r\n\r\n            </InfiniteScroll>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default BodyGraph;\r\n//                    <GraphDetails data={this.state.dataarray[0]} name={this.state.namearray[0]} onClick={() => this.handleClick(0)} height={this.props.height} width={this.props.width}/>\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {LineChart, Line, XAxis, YAxis,Tooltip,Legend,CartesianGrid} from 'recharts';\r\nimport Graph from './App';\r\nimport ChartZ from './ZingChart';\r\nimport ElementGraph from './ElementGraph';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nclass Example extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            string: \"testing\",\r\n            text: this.props.text,\r\n            integer: 3,\r\n        };\r\n    }\r\n\r\n\r\n    handleClick() {\r\n        this.setState({\r\n                integer: this.state.integer + 1,\r\n            });\r\n    }\r\n\r\n\r\n    render () {\r\n        return (\r\n        <div onClick={() => this.handleClick()}>\r\n            {this.props.text}<h1>{this.state.integer}</h1>\r\n        </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default Example;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Graph from './App';\r\nimport TopGraph from './TopGraph';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport ChartZ from './ZingChart'\r\nimport BodyGraph from './BodyGraph'\r\nimport Example from './example'\r\nimport Victory from './Victory'\r\n\r\nvar topgraph;\r\nvar bodygraph;\r\n\r\nif (window.token.length > 0) {\r\n    topgraph = window.token[0];\r\n}\r\nif (window.token.length > 1) {\r\n    bodygraph = window.token;\r\n}\r\nconsole.log(\"hi\");\r\nconsole.log(bodygraph);\r\n\r\n//ReactDOM.render(<Victory width={400} height={240}/>, document.getElementById('top-posts'));\r\nReactDOM.render(<TopGraph width={600} height={360} graph={topgraph}/>, document.getElementById('top-posts'));\r\nReactDOM.render(<BodyGraph width={400} height={240} graph={bodygraph}/>, document.getElementById('postscontainer'));\r\n//ReactDOM.render(<ChartZ type={'bar'}/>, document.getElementById('row2'));\r\n//ReactDOM.render(<ChartZ type={'line'}/>, document.getElementById('row3'));\r\n\r\n//ReactDOM.render(<Graph width={400} height={240}/>, document.getElementById('row3'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { VictoryBar, VictoryChart } from 'victory';\r\nimport React from 'react';\r\nimport './App.css';\r\nimport {LineChart, Line, XAxis, YAxis,Tooltip,Legend,CartesianGrid} from 'recharts';\r\nimport Graph from './App';\r\nimport ChartZ from './ZingChart';\r\nimport ElementGraph from './ElementGraph';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nclass Victory extends React.Component {\r\n\r\n    render () {\r\n        return (\r\n            <div width={this.props.width} height={this.props.height}>\r\n                <VictoryBar width={this.props.width} height={this.props.height}/>\r\n            </div>\r\n            );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default Victory;"],"sourceRoot":""}