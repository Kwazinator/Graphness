{"version":3,"sources":["App.js","serviceWorker.js","ZingChart.js","index.js"],"names":["GraphDetails","this","props","name","width","height","data","margin","top","right","left","bottom","onClick","strokeDasharray","dataKey","type","stroke","activeDot","r","React","Component","Graph","state","token","dataarray","Array","fill","uv","pv","amt","namearray","i","setState","className","handleClick","Boolean","window","location","hostname","match","ChartZ","config","series","values","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"js/main.a5780f4f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {LineChart, Line, XAxis, YAxis,Tooltip,Legend,CartesianGrid} from 'recharts'\n\nclass GraphDetails extends React.Component {\n\n    render () {\n        return (<div>{this.props.name}\n        <LineChart\n        width={this.props.width}\n        height={this.props.height}\n        data={this.props.data}\n        margin={{\n          top: 5, right: 30, left: 20, bottom: 5,\n        }}\n        onClick={this.props.onClick}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\n        </LineChart>\n        </div>\n        );\n    }\n}\n\n\nclass Graph extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            token: 1,\n            dataarray: Array(9).fill(\n                [\n                    {name: 'Page A', uv: 4000, pv: 2400, amt: 2400,},\n                    {name: 'Page B', uv: 3000, pv: 1398, amt: 2210,},\n                    {name: 'Page C', uv: 2000, pv: 9800, amt: 2290,},\n                    {name: 'Page D', uv: 2780, pv: 3908, amt: 2000,},\n                    {name: 'Page E', uv: 1890, pv: 4800, amt: 2181,},\n                    {name: 'Page F', uv: 2390, pv: 3800, amt: 2500,},\n                    {name: 'Page G', uv: 3490, pv: 4300, amt: 2100,},\n                 ]),\n            namearray: Array(9).fill('name2'),\n        };\n\n    }\n\n    handleClick(i) {\n        const dataarray = this.state.dataarray;\n        dataarray[i] =\n                        [\n                    {name: 'Page B', uv: 4000, pv: 2400, amt: 2400,},\n                    {name: 'Page C', uv: 3000, pv: 1398, amt: 2210,},\n                    {name: 'Page D', uv: 2000, pv: 9800, amt: 2290,},\n                    {name: 'Page E', uv: 2780, pv: 3908, amt: 2000,},\n                    {name: 'Page F', uv: 1890, pv: 4800, amt: 2181,},\n                    {name: 'Page G', uv: 2390, pv: 3800, amt: 2500,},\n                    {name: 'Page H', uv: 3490, pv: 4300, amt: 2100,},\n                 ];\n        this.setState({dataarray: dataarray, namearray: Array(9).fill('name1'),});\n    }\n\n    render () {\n        return (\n            <div className=\"graph-x\">\n                <div className=\"graph-graphDetails\">\n                    <GraphDetails data={this.state.dataarray[0]} name={this.state.namearray[0]} onClick={() => this.handleClick(0)} height={this.props.height} width={this.props.width}/>\n                </div>\n            </div>\n        );\n\n    }\n\n}\n\nexport default Graph;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport './App.css';\r\nimport ZingChart from 'zingchart-react';\r\nimport 'zingchart-react/dist/modules/zingchart-depth.min.js';\r\n\r\nclass ChartZ extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        if (props.type == 'bar') {\r\n            this.state = {\r\n            config: {\r\n                type: 'bar',\r\n                series: [{\r\n                values: [4,5,3,4,5,3,5,4,11]\r\n                    }]\r\n                }\r\n            };\r\n        }\r\n        if (props.type == 'line') {\r\n            this.state = {\r\n                config: {\r\n                        type: \"line\",\r\n                        series: [\r\n                        { values: [20,40,25,50,15,45,33,34]},\r\n                        { values: [5,30,21,18,59,50,28,33]},\r\n                        { values: [30,5,18,21,33,41,29,15]}\r\n                    ]\r\n                }\r\n            };\r\n        }\r\n  }\r\n  render() {\r\n    return (\r\n        <ZingChart data={this.state.config} width={400} height={240}/>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChartZ;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Graph from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ChartZ from './ZingChart'\n\nReactDOM.render(<Graph width={600} height={360}/>, document.getElementById('root'));\nReactDOM.render(<Graph width={400} height={240}/>, document.getElementById('row1'));\nReactDOM.render(<ChartZ type={'bar'}/>, document.getElementById('row2'));\nReactDOM.render(<ChartZ type={'line'}/>, document.getElementById('row3'));\n\n//ReactDOM.render(<Graph width={400} height={240}/>, document.getElementById('row3'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}