{"version":3,"sources":["App.js","TopGraph.js","serviceWorker.js","ZingChart.js","ElementGraph.js","index.js","BodyGraph.js"],"names":["GraphDetails","items","this","props","dataaxises","map","dataaxis","i","push","type","dataKey","name","width","height","data","dataarray","margin","top","right","left","bottom","onClick","strokeDasharray","React","Component","Graph","state","token","namearray","Array","fill","uv","pv","amt","setState","className","handleClick","TopGraph","graphdata","graph","graphaxis","copydataarray","maximumdatapoints","length","thedata","j","parseInt","class","id","data-w-id","href","Boolean","window","location","hostname","match","ElementGraph","topgraph","bodygraph","BodyGraph","dataarrays","graphaxises","names","console","log","x","z","numloaded","graphs","loader","pageStart","loadMore","loadItems","bind","hasMore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"js/main.7b4256e9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport {LineChart, Line, XAxis, YAxis,Tooltip,Legend,CartesianGrid} from 'recharts'\r\n\r\nclass GraphDetails extends React.Component {\r\n\r\n    render () {\r\n        var items = [];\r\n        this.props.dataaxises.map((dataaxis, i) => {\r\n            items.push(\r\n                <Line type=\"monotone\" dataKey={dataaxis['name']} />\r\n            );\r\n        });\r\n\r\n        return (<div>{this.props.name}\r\n        <LineChart\r\n        width={this.props.width}\r\n        height={this.props.height}\r\n        data={this.props.dataarray}\r\n        margin={{\r\n          top: 5, right: 30, left: 20, bottom: 5,\r\n        }}\r\n        onClick={this.props.onClick}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"name\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Legend />\r\n        {items}\r\n        </LineChart>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass Graph extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            token: 1,\r\n            dataarray: this.props.data,\r\n            dataaxises: this.props.dataaxises,\r\n            namearray: Array(9).fill('name2'),\r\n        };\r\n\r\n    }\r\n\r\n    handleClick(i) {\r\n        const dataarray = this.state.dataarray;\r\n        dataarray[i] =\r\n                        [\r\n                    {name: 'Page B', uv: 4000, pv: 2400, amt: 2400,},\r\n                    {name: 'Page C', uv: 3000, pv: 1398, amt: 2210,},\r\n                    {name: 'Page D', uv: 2000, pv: 9800, amt: 2290,},\r\n                    {name: 'Page E', uv: 2780, pv: 3908, amt: 2000,},\r\n                    {name: 'Page F', uv: 1890, pv: 4800, amt: 2181,},\r\n                    {name: 'Page G', uv: 2390, pv: 3800, amt: 2500,},\r\n                    {name: 'Page H', uv: 3490, pv: 4300, amt: 2100,},\r\n                 ];\r\n        this.setState({dataarray: dataarray, namearray: Array(9).fill('name1'),});\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"graph-x\">\r\n                <div className=\"graph-graphDetails\">\r\n                    <GraphDetails dataarray={this.state.dataarray} dataaxises={this.state.dataaxises} name={this.state.namearray[0]} onClick={() => this.handleClick(0)} height={this.props.height} width={this.props.width}/>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Graph;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {LineChart, Line, XAxis, YAxis,Tooltip,Legend,CartesianGrid} from 'recharts'\r\nimport Graph from './App';\r\n\r\nclass TopGraph extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        var graphdata = this.props.graph['graphdata'];\r\n        var graphaxis = this.props.graph['graphaxis'];\r\n        var copydataarray = [];\r\n        var maximumdatapoints = 0;\r\n        graphdata.map((graph, i) => {\r\n            if (maximumdatapoints < graph.length) {\r\n                maximumdatapoints = graph.length\r\n            }\r\n        });\r\n\r\n        for (var i=0;i<maximumdatapoints;i++) {\r\n            var thedata = {name: i};\r\n            for (var j=0;j<graphaxis.length;j++) {\r\n                if (i < graphdata[j].length ) {\r\n                    thedata[graphaxis[j]['name']] = parseInt(graphdata[j][i]);\r\n                }\r\n            }\r\n            copydataarray.push(thedata);\r\n        }\r\n\r\n        this.state = {\r\n            token: 1,\r\n            name: this.props.graph['graph']['name'],\r\n            dataarray: copydataarray,\r\n            dataaxises: graphaxis,\r\n            namearray: Array(9).fill('name2'),\r\n            };\r\n\r\n    }\r\n\r\n    handleClick(i) {\r\n        const dataarray = this.state.dataarray;\r\n        dataarray[i] =\r\n                        [\r\n                    {name: 'Page B', uv: 4000, pv: 2400, amt: 2400,},\r\n                    {name: 'Page C', uv: 3000, pv: 1398, amt: 2210,},\r\n                    {name: 'Page D', uv: 2000, pv: 9800, amt: 2290,},\r\n                    {name: 'Page E', uv: 2780, pv: 3908, amt: 2000,},\r\n                    {name: 'Page F', uv: 1890, pv: 4800, amt: 2181,},\r\n                    {name: 'Page G', uv: 2390, pv: 3800, amt: 2500,},\r\n                    {name: 'Page H', uv: 3490, pv: 4300, amt: 2100,},\r\n                 ];\r\n        this.setState({dataarray: dataarray, namearray: Array(9).fill('name1'),});\r\n    }\r\n\r\n    render () {\r\n        return (\r\n    <div class=\"container\">\r\n      <div class=\"posts-wrapper cc-top-post\">\r\n        <div class=\"w-dyn-list\">\r\n          <div class=\"w-dyn-items\">\r\n            <div class=\"top-post-item w-dyn-item\" id=\"top_post\">\r\n              <a data-w-id=\"f584d68a-6baf-e0a3-5c39-421b1f2647d2\" href=\"#\" class=\"top-post-image w-inline-block\">\r\n                <Graph data={this.state.dataarray} dataaxises={this.state.dataaxises} width={600} height={360}/>\r\n              </a>\r\n              <div class=\"top-post-text\">\r\n\t            <a href=\"#\" class=\"category-link\"></a>\r\n\t            <div class=\"top-post-text\">\r\n\t\t          <a href=\"#\" class=\"category-link\">\r\n\t\t          </a>\r\n\t\t          <a href=\"#\" class=\"top-post-link-block w-inline-block\">\r\n\t\t\t        <h2 class=\"h2\">{this.state.name}</h2>\r\n\t\t          </a>\r\n\t\t          <div class=\"post-short-text\">descr</div>\r\n\t\t          <div class=\"text-block-2\">\r\n\t\t          </div>\r\n                  <div class=\"post-author-text\">\r\n\t\t            <div class=\"post-author cc-top-margin\">By</div>\r\n                    <a href=\"#\" class=\"post-author\">author</a>\r\n                </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default TopGraph;\r\n//                    <GraphDetails data={this.state.dataarray[0]} name={this.state.namearray[0]} onClick={() => this.handleClick(0)} height={this.props.height} width={this.props.width}/>\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport ZingChart from 'zingchart-react';\r\nimport 'zingchart-react/dist/modules/zingchart-depth.min.js';\r\n\r\nclass ChartZ extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        if (props.type == 'bar') {\r\n            this.state = {\r\n            config: {\r\n                type: 'bar',\r\n                series: [{\r\n                values: [4,5,3,4,5,3,5,4,11]\r\n                    }]\r\n                }\r\n            };\r\n        }\r\n        if (props.type == 'line') {\r\n            this.state = {\r\n                config: {\r\n                        type: \"line\",\r\n                        series: [\r\n                        { values: [20,40,25,50,15,45,33,34]},\r\n                        { values: [5,30,21,18,59,50,28,33]},\r\n                        { values: [30,5,18,21,33,41,29,15]}\r\n                    ]\r\n                }\r\n            };\r\n        }\r\n  }\r\n  render() {\r\n    return (\r\n        <ZingChart data={this.state.config} width={400} height={240}/>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChartZ;\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {LineChart, Line, XAxis, YAxis,Tooltip,Legend,CartesianGrid} from 'recharts'\r\nimport Graph from './App';\r\nimport ChartZ from './ZingChart'\r\n\r\nclass ElementGraph extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div class=\"_3-collection-item w-dyn-item w-col w-col-3\">\r\n                <a href=\"#\" class=\"posts-image w-inline-block\">\r\n                    <Graph data={this.props.dataarray} dataaxises={this.props.dataaxises} width={600} height={360}/>\r\n                </a>\r\n                <div class=\"post-info-text\">\r\n                    <a href=\"#\" class=\"category-link\">catagory</a>\r\n                    <br></br>\r\n                    <a href=\"#\" class=\"post-title w-inline-block\">\r\n                        <h3 class=\"h3\">{this.props.name}</h3>\r\n                    </a>\r\n                    <div>Description</div>\r\n                    <div class=\"post-author-text cc-small-thumbnail\">\r\n                        <div class=\"post-author cc-top-margin\">By</div>\r\n                        <a href=\"#\" class=\"post-author\">author</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default ElementGraph;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Graph from './App';\r\nimport TopGraph from './TopGraph';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport ChartZ from './ZingChart'\r\nimport BodyGraph from './BodyGraph'\r\n\r\nvar topgraph;\r\nvar bodygraph;\r\n\r\nif (window.token.length > 0) {\r\n    topgraph = window.token[0];\r\n}\r\nif (window.token.length > 1) {\r\n    bodygraph = window.token;\r\n}\r\n\r\nconsole.log(bodygraph);\r\nReactDOM.render(<TopGraph width={600} height={360} graph={topgraph}/>, document.getElementById('top-posts'));\r\nReactDOM.render(<BodyGraph width={400} height={240} graph={bodygraph}/>, document.getElementById('postscontainer'));\r\n//ReactDOM.render(<ChartZ type={'bar'}/>, document.getElementById('row2'));\r\n//ReactDOM.render(<ChartZ type={'line'}/>, document.getElementById('row3'));\r\n\r\n//ReactDOM.render(<Graph width={400} height={240}/>, document.getElementById('row3'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {LineChart, Line, XAxis, YAxis,Tooltip,Legend,CartesianGrid} from 'recharts';\r\nimport Graph from './App';\r\nimport ChartZ from './ZingChart';\r\nimport ElementGraph from './ElementGraph';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\n\r\n\r\nclass BodyGraph extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        var dataarrays = [];\r\n        var graphaxises = [];\r\n        var names = [];\r\n        console.log(this.props.graph.length);\r\n        for (var x =0;x<this.props.graph.length;x++) {\r\n            var graphdata = this.props.graph[x]['graphdata'];\r\n            var graphaxis = this.props.graph[x]['graphaxis'];\r\n            var name = this.props.graph[x]['graph']['name'];\r\n            var copydataarray = [];\r\n            var maximumdatapoints = 0;\r\n            graphdata.map((graph, z) => {\r\n                if (maximumdatapoints < graph.length) {\r\n                    maximumdatapoints = graph.length;\r\n                }\r\n            });\r\n\r\n            for (var i=0;i<maximumdatapoints;i++) {\r\n                var thedata = {name: i};\r\n                for (var j=0;j<graphaxis.length;j++) {\r\n                    if (i < graphdata[j].length ) {\r\n                        thedata[graphaxis[j]['name']] = parseInt(graphdata[j][i]);\r\n                    }\r\n                }\r\n                copydataarray.push(thedata);\r\n            }\r\n            dataarrays.push(copydataarray);\r\n            graphaxises.push(graphaxis);\r\n            names.push(name);\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        console.log(dataarrays)\r\n        console.log(graphaxises)\r\n        var numloaded = dataarrays.length;\r\n        this.state = {\r\n            token: 1,\r\n            dataarrays: dataarrays,\r\n            dataaxises: graphaxises,\r\n            namearray: Array(9).fill('name2'),\r\n            names: names,\r\n            numloaded: numloaded,\r\n        };\r\n\r\n    }\r\n\r\n    loadItems() {\r\n        var graphs = this.state.dataarrays;\r\n        //add new graphs with axiom here\r\n        graphs.push('bar');\r\n        graphs.push('bar');\r\n        graphs.push('bar');\r\n        this.setState({\r\n            dataarrays: graphs,\r\n        });\r\n    }\r\n\r\n\r\n    handleClick(i) {\r\n        const dataarray = this.state.dataarray;\r\n        dataarray[i] =\r\n                        [\r\n                    {name: 'Page B', uv: 4000, pv: 2400, amt: 2400,},\r\n                    {name: 'Page C', uv: 3000, pv: 1398, amt: 2210,},\r\n                    {name: 'Page D', uv: 2000, pv: 9800, amt: 2290,},\r\n                    {name: 'Page E', uv: 2780, pv: 3908, amt: 2000,},\r\n                    {name: 'Page F', uv: 1890, pv: 4800, amt: 2181,},\r\n                    {name: 'Page G', uv: 2390, pv: 3800, amt: 2500,},\r\n                    {name: 'Page H', uv: 3490, pv: 4300, amt: 2100,},\r\n                 ];\r\n        this.setState({dataarray: dataarray, namearray: Array(9).fill('name1'),});\r\n    }\r\n\r\n    render () {\r\n        const loader = <div className=\"loader\">Loading ...</div>;\r\n\r\n        var items = [];\r\n\r\n        this.state.dataarrays.map((graph, i) => {\r\n            items.push(\r\n                <ElementGraph name={this.state.names[i]} dataarray={graph} dataaxises={this.state.dataaxises[i]} width={400} height={240}/>\r\n            );\r\n        });\r\n        return (<div>\r\n            <InfiniteScroll\r\n                pageStart={0}\r\n                loadMore={this.loadItems.bind(this)}\r\n                hasMore={true}\r\n                loader={loader}>\r\n                    {items}\r\n\r\n            </InfiniteScroll>\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default BodyGraph;\r\n//                    <GraphDetails data={this.state.dataarray[0]} name={this.state.namearray[0]} onClick={() => this.handleClick(0)} height={this.props.height} width={this.props.width}/>\r\n"],"sourceRoot":""}